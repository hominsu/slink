// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hominsu/slink/app/slink/service/internal/data/ent/predicate"
	"github.com/hominsu/slink/app/slink/service/internal/data/ent/shortlink"
)

// ShortLinkUpdate is the builder for updating ShortLink entities.
type ShortLinkUpdate struct {
	config
	hooks     []Hook
	mutation  *ShortLinkMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ShortLinkUpdate builder.
func (slu *ShortLinkUpdate) Where(ps ...predicate.ShortLink) *ShortLinkUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetUpdatedAt sets the "updated_at" field.
func (slu *ShortLinkUpdate) SetUpdatedAt(t time.Time) *ShortLinkUpdate {
	slu.mutation.SetUpdatedAt(t)
	return slu
}

// SetKey sets the "key" field.
func (slu *ShortLinkUpdate) SetKey(s string) *ShortLinkUpdate {
	slu.mutation.SetKey(s)
	return slu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (slu *ShortLinkUpdate) SetNillableKey(s *string) *ShortLinkUpdate {
	if s != nil {
		slu.SetKey(*s)
	}
	return slu
}

// SetLink sets the "link" field.
func (slu *ShortLinkUpdate) SetLink(s string) *ShortLinkUpdate {
	slu.mutation.SetLink(s)
	return slu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (slu *ShortLinkUpdate) SetNillableLink(s *string) *ShortLinkUpdate {
	if s != nil {
		slu.SetLink(*s)
	}
	return slu
}

// Mutation returns the ShortLinkMutation object of the builder.
func (slu *ShortLinkUpdate) Mutation() *ShortLinkMutation {
	return slu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *ShortLinkUpdate) Save(ctx context.Context) (int, error) {
	slu.defaults()
	return withHooks(ctx, slu.sqlSave, slu.mutation, slu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slu *ShortLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *ShortLinkUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *ShortLinkUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slu *ShortLinkUpdate) defaults() {
	if _, ok := slu.mutation.UpdatedAt(); !ok {
		v := shortlink.UpdateDefaultUpdatedAt()
		slu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (slu *ShortLinkUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShortLinkUpdate {
	slu.modifiers = append(slu.modifiers, modifiers...)
	return slu
}

func (slu *ShortLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(shortlink.Table, shortlink.Columns, sqlgraph.NewFieldSpec(shortlink.FieldID, field.TypeInt))
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.UpdatedAt(); ok {
		_spec.SetField(shortlink.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := slu.mutation.Key(); ok {
		_spec.SetField(shortlink.FieldKey, field.TypeString, value)
	}
	if value, ok := slu.mutation.Link(); ok {
		_spec.SetField(shortlink.FieldLink, field.TypeString, value)
	}
	_spec.AddModifiers(slu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shortlink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	slu.mutation.done = true
	return n, nil
}

// ShortLinkUpdateOne is the builder for updating a single ShortLink entity.
type ShortLinkUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ShortLinkMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sluo *ShortLinkUpdateOne) SetUpdatedAt(t time.Time) *ShortLinkUpdateOne {
	sluo.mutation.SetUpdatedAt(t)
	return sluo
}

// SetKey sets the "key" field.
func (sluo *ShortLinkUpdateOne) SetKey(s string) *ShortLinkUpdateOne {
	sluo.mutation.SetKey(s)
	return sluo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (sluo *ShortLinkUpdateOne) SetNillableKey(s *string) *ShortLinkUpdateOne {
	if s != nil {
		sluo.SetKey(*s)
	}
	return sluo
}

// SetLink sets the "link" field.
func (sluo *ShortLinkUpdateOne) SetLink(s string) *ShortLinkUpdateOne {
	sluo.mutation.SetLink(s)
	return sluo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (sluo *ShortLinkUpdateOne) SetNillableLink(s *string) *ShortLinkUpdateOne {
	if s != nil {
		sluo.SetLink(*s)
	}
	return sluo
}

// Mutation returns the ShortLinkMutation object of the builder.
func (sluo *ShortLinkUpdateOne) Mutation() *ShortLinkMutation {
	return sluo.mutation
}

// Where appends a list predicates to the ShortLinkUpdate builder.
func (sluo *ShortLinkUpdateOne) Where(ps ...predicate.ShortLink) *ShortLinkUpdateOne {
	sluo.mutation.Where(ps...)
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *ShortLinkUpdateOne) Select(field string, fields ...string) *ShortLinkUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated ShortLink entity.
func (sluo *ShortLinkUpdateOne) Save(ctx context.Context) (*ShortLink, error) {
	sluo.defaults()
	return withHooks(ctx, sluo.sqlSave, sluo.mutation, sluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *ShortLinkUpdateOne) SaveX(ctx context.Context) *ShortLink {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *ShortLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *ShortLinkUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sluo *ShortLinkUpdateOne) defaults() {
	if _, ok := sluo.mutation.UpdatedAt(); !ok {
		v := shortlink.UpdateDefaultUpdatedAt()
		sluo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sluo *ShortLinkUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ShortLinkUpdateOne {
	sluo.modifiers = append(sluo.modifiers, modifiers...)
	return sluo
}

func (sluo *ShortLinkUpdateOne) sqlSave(ctx context.Context) (_node *ShortLink, err error) {
	_spec := sqlgraph.NewUpdateSpec(shortlink.Table, shortlink.Columns, sqlgraph.NewFieldSpec(shortlink.FieldID, field.TypeInt))
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShortLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shortlink.FieldID)
		for _, f := range fields {
			if !shortlink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shortlink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.UpdatedAt(); ok {
		_spec.SetField(shortlink.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sluo.mutation.Key(); ok {
		_spec.SetField(shortlink.FieldKey, field.TypeString, value)
	}
	if value, ok := sluo.mutation.Link(); ok {
		_spec.SetField(shortlink.FieldLink, field.TypeString, value)
	}
	_spec.AddModifiers(sluo.modifiers...)
	_node = &ShortLink{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shortlink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sluo.mutation.done = true
	return _node, nil
}
