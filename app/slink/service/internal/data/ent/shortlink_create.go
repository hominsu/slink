// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hominsu/slink/app/slink/service/internal/data/ent/shortlink"
)

// ShortLinkCreate is the builder for creating a ShortLink entity.
type ShortLinkCreate struct {
	config
	mutation *ShortLinkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (slc *ShortLinkCreate) SetCreatedAt(t time.Time) *ShortLinkCreate {
	slc.mutation.SetCreatedAt(t)
	return slc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slc *ShortLinkCreate) SetNillableCreatedAt(t *time.Time) *ShortLinkCreate {
	if t != nil {
		slc.SetCreatedAt(*t)
	}
	return slc
}

// SetUpdatedAt sets the "updated_at" field.
func (slc *ShortLinkCreate) SetUpdatedAt(t time.Time) *ShortLinkCreate {
	slc.mutation.SetUpdatedAt(t)
	return slc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (slc *ShortLinkCreate) SetNillableUpdatedAt(t *time.Time) *ShortLinkCreate {
	if t != nil {
		slc.SetUpdatedAt(*t)
	}
	return slc
}

// SetKey sets the "key" field.
func (slc *ShortLinkCreate) SetKey(s string) *ShortLinkCreate {
	slc.mutation.SetKey(s)
	return slc
}

// SetLink sets the "link" field.
func (slc *ShortLinkCreate) SetLink(s string) *ShortLinkCreate {
	slc.mutation.SetLink(s)
	return slc
}

// SetExpireAt sets the "expire_at" field.
func (slc *ShortLinkCreate) SetExpireAt(t time.Time) *ShortLinkCreate {
	slc.mutation.SetExpireAt(t)
	return slc
}

// SetNillableExpireAt sets the "expire_at" field if the given value is not nil.
func (slc *ShortLinkCreate) SetNillableExpireAt(t *time.Time) *ShortLinkCreate {
	if t != nil {
		slc.SetExpireAt(*t)
	}
	return slc
}

// Mutation returns the ShortLinkMutation object of the builder.
func (slc *ShortLinkCreate) Mutation() *ShortLinkMutation {
	return slc.mutation
}

// Save creates the ShortLink in the database.
func (slc *ShortLinkCreate) Save(ctx context.Context) (*ShortLink, error) {
	slc.defaults()
	return withHooks(ctx, slc.sqlSave, slc.mutation, slc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (slc *ShortLinkCreate) SaveX(ctx context.Context) *ShortLink {
	v, err := slc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slc *ShortLinkCreate) Exec(ctx context.Context) error {
	_, err := slc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slc *ShortLinkCreate) ExecX(ctx context.Context) {
	if err := slc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slc *ShortLinkCreate) defaults() {
	if _, ok := slc.mutation.CreatedAt(); !ok {
		v := shortlink.DefaultCreatedAt()
		slc.mutation.SetCreatedAt(v)
	}
	if _, ok := slc.mutation.UpdatedAt(); !ok {
		v := shortlink.DefaultUpdatedAt()
		slc.mutation.SetUpdatedAt(v)
	}
	if _, ok := slc.mutation.ExpireAt(); !ok {
		v := shortlink.DefaultExpireAt()
		slc.mutation.SetExpireAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slc *ShortLinkCreate) check() error {
	if _, ok := slc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ShortLink.created_at"`)}
	}
	if _, ok := slc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ShortLink.updated_at"`)}
	}
	if _, ok := slc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "ShortLink.key"`)}
	}
	if _, ok := slc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "ShortLink.link"`)}
	}
	if _, ok := slc.mutation.ExpireAt(); !ok {
		return &ValidationError{Name: "expire_at", err: errors.New(`ent: missing required field "ShortLink.expire_at"`)}
	}
	return nil
}

func (slc *ShortLinkCreate) sqlSave(ctx context.Context) (*ShortLink, error) {
	if err := slc.check(); err != nil {
		return nil, err
	}
	_node, _spec := slc.createSpec()
	if err := sqlgraph.CreateNode(ctx, slc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	slc.mutation.id = &_node.ID
	slc.mutation.done = true
	return _node, nil
}

func (slc *ShortLinkCreate) createSpec() (*ShortLink, *sqlgraph.CreateSpec) {
	var (
		_node = &ShortLink{config: slc.config}
		_spec = sqlgraph.NewCreateSpec(shortlink.Table, sqlgraph.NewFieldSpec(shortlink.FieldID, field.TypeInt))
	)
	_spec.OnConflict = slc.conflict
	if value, ok := slc.mutation.CreatedAt(); ok {
		_spec.SetField(shortlink.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := slc.mutation.UpdatedAt(); ok {
		_spec.SetField(shortlink.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := slc.mutation.Key(); ok {
		_spec.SetField(shortlink.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := slc.mutation.Link(); ok {
		_spec.SetField(shortlink.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := slc.mutation.ExpireAt(); ok {
		_spec.SetField(shortlink.FieldExpireAt, field.TypeTime, value)
		_node.ExpireAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShortLink.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShortLinkUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (slc *ShortLinkCreate) OnConflict(opts ...sql.ConflictOption) *ShortLinkUpsertOne {
	slc.conflict = opts
	return &ShortLinkUpsertOne{
		create: slc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShortLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (slc *ShortLinkCreate) OnConflictColumns(columns ...string) *ShortLinkUpsertOne {
	slc.conflict = append(slc.conflict, sql.ConflictColumns(columns...))
	return &ShortLinkUpsertOne{
		create: slc,
	}
}

type (
	// ShortLinkUpsertOne is the builder for "upsert"-ing
	//  one ShortLink node.
	ShortLinkUpsertOne struct {
		create *ShortLinkCreate
	}

	// ShortLinkUpsert is the "OnConflict" setter.
	ShortLinkUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ShortLinkUpsert) SetUpdatedAt(v time.Time) *ShortLinkUpsert {
	u.Set(shortlink.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ShortLinkUpsert) UpdateUpdatedAt() *ShortLinkUpsert {
	u.SetExcluded(shortlink.FieldUpdatedAt)
	return u
}

// SetKey sets the "key" field.
func (u *ShortLinkUpsert) SetKey(v string) *ShortLinkUpsert {
	u.Set(shortlink.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ShortLinkUpsert) UpdateKey() *ShortLinkUpsert {
	u.SetExcluded(shortlink.FieldKey)
	return u
}

// SetLink sets the "link" field.
func (u *ShortLinkUpsert) SetLink(v string) *ShortLinkUpsert {
	u.Set(shortlink.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *ShortLinkUpsert) UpdateLink() *ShortLinkUpsert {
	u.SetExcluded(shortlink.FieldLink)
	return u
}

// SetExpireAt sets the "expire_at" field.
func (u *ShortLinkUpsert) SetExpireAt(v time.Time) *ShortLinkUpsert {
	u.Set(shortlink.FieldExpireAt, v)
	return u
}

// UpdateExpireAt sets the "expire_at" field to the value that was provided on create.
func (u *ShortLinkUpsert) UpdateExpireAt() *ShortLinkUpsert {
	u.SetExcluded(shortlink.FieldExpireAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ShortLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ShortLinkUpsertOne) UpdateNewValues() *ShortLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(shortlink.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShortLink.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ShortLinkUpsertOne) Ignore() *ShortLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShortLinkUpsertOne) DoNothing() *ShortLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShortLinkCreate.OnConflict
// documentation for more info.
func (u *ShortLinkUpsertOne) Update(set func(*ShortLinkUpsert)) *ShortLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShortLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ShortLinkUpsertOne) SetUpdatedAt(v time.Time) *ShortLinkUpsertOne {
	return u.Update(func(s *ShortLinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ShortLinkUpsertOne) UpdateUpdatedAt() *ShortLinkUpsertOne {
	return u.Update(func(s *ShortLinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetKey sets the "key" field.
func (u *ShortLinkUpsertOne) SetKey(v string) *ShortLinkUpsertOne {
	return u.Update(func(s *ShortLinkUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ShortLinkUpsertOne) UpdateKey() *ShortLinkUpsertOne {
	return u.Update(func(s *ShortLinkUpsert) {
		s.UpdateKey()
	})
}

// SetLink sets the "link" field.
func (u *ShortLinkUpsertOne) SetLink(v string) *ShortLinkUpsertOne {
	return u.Update(func(s *ShortLinkUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *ShortLinkUpsertOne) UpdateLink() *ShortLinkUpsertOne {
	return u.Update(func(s *ShortLinkUpsert) {
		s.UpdateLink()
	})
}

// SetExpireAt sets the "expire_at" field.
func (u *ShortLinkUpsertOne) SetExpireAt(v time.Time) *ShortLinkUpsertOne {
	return u.Update(func(s *ShortLinkUpsert) {
		s.SetExpireAt(v)
	})
}

// UpdateExpireAt sets the "expire_at" field to the value that was provided on create.
func (u *ShortLinkUpsertOne) UpdateExpireAt() *ShortLinkUpsertOne {
	return u.Update(func(s *ShortLinkUpsert) {
		s.UpdateExpireAt()
	})
}

// Exec executes the query.
func (u *ShortLinkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShortLinkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShortLinkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ShortLinkUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ShortLinkUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ShortLinkCreateBulk is the builder for creating many ShortLink entities in bulk.
type ShortLinkCreateBulk struct {
	config
	err      error
	builders []*ShortLinkCreate
	conflict []sql.ConflictOption
}

// Save creates the ShortLink entities in the database.
func (slcb *ShortLinkCreateBulk) Save(ctx context.Context) ([]*ShortLink, error) {
	if slcb.err != nil {
		return nil, slcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(slcb.builders))
	nodes := make([]*ShortLink, len(slcb.builders))
	mutators := make([]Mutator, len(slcb.builders))
	for i := range slcb.builders {
		func(i int, root context.Context) {
			builder := slcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShortLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = slcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slcb *ShortLinkCreateBulk) SaveX(ctx context.Context) []*ShortLink {
	v, err := slcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slcb *ShortLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := slcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slcb *ShortLinkCreateBulk) ExecX(ctx context.Context) {
	if err := slcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShortLink.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShortLinkUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (slcb *ShortLinkCreateBulk) OnConflict(opts ...sql.ConflictOption) *ShortLinkUpsertBulk {
	slcb.conflict = opts
	return &ShortLinkUpsertBulk{
		create: slcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShortLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (slcb *ShortLinkCreateBulk) OnConflictColumns(columns ...string) *ShortLinkUpsertBulk {
	slcb.conflict = append(slcb.conflict, sql.ConflictColumns(columns...))
	return &ShortLinkUpsertBulk{
		create: slcb,
	}
}

// ShortLinkUpsertBulk is the builder for "upsert"-ing
// a bulk of ShortLink nodes.
type ShortLinkUpsertBulk struct {
	create *ShortLinkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ShortLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ShortLinkUpsertBulk) UpdateNewValues() *ShortLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(shortlink.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShortLink.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ShortLinkUpsertBulk) Ignore() *ShortLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShortLinkUpsertBulk) DoNothing() *ShortLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShortLinkCreateBulk.OnConflict
// documentation for more info.
func (u *ShortLinkUpsertBulk) Update(set func(*ShortLinkUpsert)) *ShortLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShortLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ShortLinkUpsertBulk) SetUpdatedAt(v time.Time) *ShortLinkUpsertBulk {
	return u.Update(func(s *ShortLinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ShortLinkUpsertBulk) UpdateUpdatedAt() *ShortLinkUpsertBulk {
	return u.Update(func(s *ShortLinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetKey sets the "key" field.
func (u *ShortLinkUpsertBulk) SetKey(v string) *ShortLinkUpsertBulk {
	return u.Update(func(s *ShortLinkUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ShortLinkUpsertBulk) UpdateKey() *ShortLinkUpsertBulk {
	return u.Update(func(s *ShortLinkUpsert) {
		s.UpdateKey()
	})
}

// SetLink sets the "link" field.
func (u *ShortLinkUpsertBulk) SetLink(v string) *ShortLinkUpsertBulk {
	return u.Update(func(s *ShortLinkUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *ShortLinkUpsertBulk) UpdateLink() *ShortLinkUpsertBulk {
	return u.Update(func(s *ShortLinkUpsert) {
		s.UpdateLink()
	})
}

// SetExpireAt sets the "expire_at" field.
func (u *ShortLinkUpsertBulk) SetExpireAt(v time.Time) *ShortLinkUpsertBulk {
	return u.Update(func(s *ShortLinkUpsert) {
		s.SetExpireAt(v)
	})
}

// UpdateExpireAt sets the "expire_at" field to the value that was provided on create.
func (u *ShortLinkUpsertBulk) UpdateExpireAt() *ShortLinkUpsertBulk {
	return u.Update(func(s *ShortLinkUpsert) {
		s.UpdateExpireAt()
	})
}

// Exec executes the query.
func (u *ShortLinkUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ShortLinkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShortLinkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShortLinkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
