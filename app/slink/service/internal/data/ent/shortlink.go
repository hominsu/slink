// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/hominsu/slink/app/slink/service/internal/data/ent/shortlink"
)

// ShortLink is the model entity for the ShortLink schema.
type ShortLink struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// ExpireAt holds the value of the "expire_at" field.
	ExpireAt     time.Time `json:"expire_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShortLink) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shortlink.FieldID:
			values[i] = new(sql.NullInt64)
		case shortlink.FieldKey, shortlink.FieldLink:
			values[i] = new(sql.NullString)
		case shortlink.FieldCreatedAt, shortlink.FieldUpdatedAt, shortlink.FieldExpireAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShortLink fields.
func (sl *ShortLink) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shortlink.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = int(value.Int64)
		case shortlink.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sl.CreatedAt = value.Time
			}
		case shortlink.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sl.UpdatedAt = value.Time
			}
		case shortlink.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				sl.Key = value.String
			}
		case shortlink.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				sl.Link = value.String
			}
		case shortlink.FieldExpireAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expire_at", values[i])
			} else if value.Valid {
				sl.ExpireAt = value.Time
			}
		default:
			sl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShortLink.
// This includes values selected through modifiers, order, etc.
func (sl *ShortLink) Value(name string) (ent.Value, error) {
	return sl.selectValues.Get(name)
}

// Update returns a builder for updating this ShortLink.
// Note that you need to call ShortLink.Unwrap() before calling this method if this ShortLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *ShortLink) Update() *ShortLinkUpdateOne {
	return NewShortLinkClient(sl.config).UpdateOne(sl)
}

// Unwrap unwraps the ShortLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *ShortLink) Unwrap() *ShortLink {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShortLink is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *ShortLink) String() string {
	var builder strings.Builder
	builder.WriteString("ShortLink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(sl.Key)
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(sl.Link)
	builder.WriteString(", ")
	builder.WriteString("expire_at=")
	builder.WriteString(sl.ExpireAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ShortLinks is a parsable slice of ShortLink.
type ShortLinks []*ShortLink
