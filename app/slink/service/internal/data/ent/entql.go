// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/hominsu/slink/app/slink/service/internal/data/ent/shortlink"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shortlink.Table,
			Columns: shortlink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shortlink.FieldID,
			},
		},
		Type: "ShortLink",
		Fields: map[string]*sqlgraph.FieldSpec{
			shortlink.FieldCreatedAt: {Type: field.TypeTime, Column: shortlink.FieldCreatedAt},
			shortlink.FieldUpdatedAt: {Type: field.TypeTime, Column: shortlink.FieldUpdatedAt},
			shortlink.FieldKey:       {Type: field.TypeString, Column: shortlink.FieldKey},
			shortlink.FieldLink:      {Type: field.TypeString, Column: shortlink.FieldLink},
			shortlink.FieldExpireAt:  {Type: field.TypeTime, Column: shortlink.FieldExpireAt},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (slq *ShortLinkQuery) addPredicate(pred func(s *sql.Selector)) {
	slq.predicates = append(slq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShortLinkQuery builder.
func (slq *ShortLinkQuery) Filter() *ShortLinkFilter {
	return &ShortLinkFilter{config: slq.config, predicateAdder: slq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShortLinkMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShortLinkMutation builder.
func (m *ShortLinkMutation) Filter() *ShortLinkFilter {
	return &ShortLinkFilter{config: m.config, predicateAdder: m}
}

// ShortLinkFilter provides a generic filtering capability at runtime for ShortLinkQuery.
type ShortLinkFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShortLinkFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ShortLinkFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(shortlink.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ShortLinkFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(shortlink.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ShortLinkFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(shortlink.FieldUpdatedAt))
}

// WhereKey applies the entql string predicate on the key field.
func (f *ShortLinkFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(shortlink.FieldKey))
}

// WhereLink applies the entql string predicate on the link field.
func (f *ShortLinkFilter) WhereLink(p entql.StringP) {
	f.Where(p.Field(shortlink.FieldLink))
}

// WhereExpireAt applies the entql time.Time predicate on the expire_at field.
func (f *ShortLinkFilter) WhereExpireAt(p entql.TimeP) {
	f.Where(p.Field(shortlink.FieldExpireAt))
}
