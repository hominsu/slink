// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/hominsu/slink/app/slink/service/internal/biz"
	"github.com/hominsu/slink/app/slink/service/internal/conf"
	"github.com/hominsu/slink/app/slink/service/internal/data"
	"github.com/hominsu/slink/app/slink/service/internal/server"
	"github.com/hominsu/slink/app/slink/service/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, confSecret *conf.Secret, version string, logger log.Logger) (*kratos.App, func(), error) {
	client := data.NewEntClient(confData, logger)
	filter := data.NewCuckooFilter(confData)
	migrationStatus := data.Migration(client, filter, logger)
	dataData, cleanup, err := data.NewData(client, confData, logger, migrationStatus)
	if err != nil {
		return nil, nil, err
	}
	shortLinkRepo := data.NewShortLinkRepo(dataData, logger)
	shortLinkRepoUsecase := biz.NewShortLinkRepoUsecase(shortLinkRepo, filter, confData, logger)
	siteService := service.NewSiteService(shortLinkRepoUsecase, logger, version)
	userService := service.NewUserService(confSecret, logger)
	adminService := service.NewAdminService(shortLinkRepoUsecase, logger)
	shortLinkService := service.NewShortLinkService(shortLinkRepoUsecase, logger)
	shortLinkRedirectService := service.NewShortLinkRedirectService(shortLinkRepoUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, siteService, userService, adminService, shortLinkService, shortLinkRedirectService, confSecret, logger)
	grpcServer := server.NewGRPCServer(confServer, shortLinkService, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
