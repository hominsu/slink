// @generated by protoc-gen-es v1.6.0 with parameter "target=js+dts"
// @generated from file slink/service/v1/site.proto (package slink.service.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message slink.service.v1.PingReply
 */
export declare class PingReply extends Message<PingReply> {
  /**
   * @generated from field: string version = 1;
   */
  version: string;

  constructor(data?: PartialMessage<PingReply>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "slink.service.v1.PingReply";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingReply;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingReply;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingReply;

  static equals(a: PingReply | PlainMessage<PingReply> | undefined, b: PingReply | PlainMessage<PingReply> | undefined): boolean;
}

/**
 * @generated from message slink.service.v1.CountReply
 */
export declare class CountReply extends Message<CountReply> {
  /**
   * @generated from field: uint64 count = 1;
   */
  count: bigint;

  constructor(data?: PartialMessage<CountReply>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "slink.service.v1.CountReply";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountReply;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountReply;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountReply;

  static equals(a: CountReply | PlainMessage<CountReply> | undefined, b: CountReply | PlainMessage<CountReply> | undefined): boolean;
}

