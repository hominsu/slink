// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: slink/service/v1/slink.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateShortLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShortLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShortLinkRequestMultiError, or nil if none found.
func (m *CreateShortLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetLink()); err != nil {
		err = CreateShortLinkRequestValidationError{
			field:  "Link",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CreateShortLinkRequestValidationError{
			field:  "Link",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpireAt() == nil {
		err := CreateShortLinkRequestValidationError{
			field:  "ExpireAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if t := m.GetExpireAt(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = CreateShortLinkRequestValidationError{
				field:  "ExpireAt",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()
			within := time.Duration(2678400*time.Second + 0*time.Nanosecond)

			if ts.Sub(now) <= 0 || ts.Sub(now.Add(within)) > 0 {
				err := CreateShortLinkRequestValidationError{
					field:  "ExpireAt",
					reason: "value must be greater than now within 744h0m0s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return CreateShortLinkRequestMultiError(errors)
	}

	return nil
}

// CreateShortLinkRequestMultiError is an error wrapping multiple validation
// errors returned by CreateShortLinkRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateShortLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortLinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortLinkRequestMultiError) AllErrors() []error { return m }

// CreateShortLinkRequestValidationError is the validation error returned by
// CreateShortLinkRequest.Validate if the designated constraints aren't met.
type CreateShortLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortLinkRequestValidationError) ErrorName() string {
	return "CreateShortLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortLinkRequestValidationError{}

// Validate checks the field values on CreateShortLinkReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShortLinkReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortLinkReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShortLinkReplyMultiError, or nil if none found.
func (m *CreateShortLinkReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortLinkReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if all {
		switch v := interface{}(m.GetExpireAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShortLinkReplyValidationError{
					field:  "ExpireAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShortLinkReplyValidationError{
					field:  "ExpireAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShortLinkReplyValidationError{
				field:  "ExpireAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShortLinkReplyMultiError(errors)
	}

	return nil
}

// CreateShortLinkReplyMultiError is an error wrapping multiple validation
// errors returned by CreateShortLinkReply.ValidateAll() if the designated
// constraints aren't met.
type CreateShortLinkReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortLinkReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortLinkReplyMultiError) AllErrors() []error { return m }

// CreateShortLinkReplyValidationError is the validation error returned by
// CreateShortLinkReply.Validate if the designated constraints aren't met.
type CreateShortLinkReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortLinkReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortLinkReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortLinkReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortLinkReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortLinkReplyValidationError) ErrorName() string {
	return "CreateShortLinkReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortLinkReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortLinkReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortLinkReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortLinkReplyValidationError{}
