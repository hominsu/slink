// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnknown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SLinkErrorReason_UNKNOWN.String() && e.Code == 500
}

func ErrorUnknown(format string, args ...interface{}) *errors.Error {
	return errors.New(500, SLinkErrorReason_UNKNOWN.String(), fmt.Sprintf(format, args...))
}

func IsInternal(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SLinkErrorReason_INTERNAL.String() && e.Code == 500
}

func ErrorInternal(format string, args ...interface{}) *errors.Error {
	return errors.New(500, SLinkErrorReason_INTERNAL.String(), fmt.Sprintf(format, args...))
}

func IsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SLinkErrorReason_NOT_FOUND.String() && e.Code == 404
}

func ErrorNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, SLinkErrorReason_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SLinkErrorReason_CONFLICT.String() && e.Code == 409
}

func ErrorConflict(format string, args ...interface{}) *errors.Error {
	return errors.New(409, SLinkErrorReason_CONFLICT.String(), fmt.Sprintf(format, args...))
}

func IsInvalidArgument(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SLinkErrorReason_INVALID_ARGUMENT.String() && e.Code == 400
}

func ErrorInvalidArgument(format string, args ...interface{}) *errors.Error {
	return errors.New(400, SLinkErrorReason_INVALID_ARGUMENT.String(), fmt.Sprintf(format, args...))
}

func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SLinkErrorReason_UNAUTHORIZED.String() && e.Code == 401
}

func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, SLinkErrorReason_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

func IsMovedPermanently(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == SLinkErrorReason_MOVED_PERMANENTLY.String() && e.Code == 301
}

func ErrorMovedPermanently(format string, args ...interface{}) *errors.Error {
	return errors.New(301, SLinkErrorReason_MOVED_PERMANENTLY.String(), fmt.Sprintf(format, args...))
}
