// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             (unknown)
// source: slink/service/v1/admin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminServiceDeleteShortLink = "/slink.service.v1.AdminService/DeleteShortLink"
const OperationAdminServiceFlushShortLink = "/slink.service.v1.AdminService/FlushShortLink"
const OperationAdminServiceListShortLinks = "/slink.service.v1.AdminService/ListShortLinks"

type AdminServiceHTTPServer interface {
	DeleteShortLink(context.Context, *DeleteShortLinkRequest) (*emptypb.Empty, error)
	FlushShortLink(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ListShortLinks(context.Context, *ListShortLinkRequest) (*ListShortLinkReply, error)
}

func RegisterAdminServiceHTTPServer(s *http.Server, srv AdminServiceHTTPServer) {
	r := s.Route("/")
	r.DELETE("/v1/admin/flush", _AdminService_FlushShortLink0_HTTP_Handler(srv))
	r.GET("/v1/admin/slinks", _AdminService_ListShortLinks0_HTTP_Handler(srv))
	r.DELETE("/v1/admin/slinks/{key}", _AdminService_DeleteShortLink0_HTTP_Handler(srv))
}

func _AdminService_FlushShortLink0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceFlushShortLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FlushShortLink(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AdminService_ListShortLinks0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListShortLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceListShortLinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListShortLinks(ctx, req.(*ListShortLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListShortLinkReply)
		return ctx.Result(200, reply)
	}
}

func _AdminService_DeleteShortLink0_HTTP_Handler(srv AdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteShortLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminServiceDeleteShortLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteShortLink(ctx, req.(*DeleteShortLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type AdminServiceHTTPClient interface {
	DeleteShortLink(ctx context.Context, req *DeleteShortLinkRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	FlushShortLink(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ListShortLinks(ctx context.Context, req *ListShortLinkRequest, opts ...http.CallOption) (rsp *ListShortLinkReply, err error)
}

type AdminServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminServiceHTTPClient(client *http.Client) AdminServiceHTTPClient {
	return &AdminServiceHTTPClientImpl{client}
}

func (c *AdminServiceHTTPClientImpl) DeleteShortLink(ctx context.Context, in *DeleteShortLinkRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/admin/slinks/{key}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceDeleteShortLink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) FlushShortLink(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/admin/flush"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceFlushShortLink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminServiceHTTPClientImpl) ListShortLinks(ctx context.Context, in *ListShortLinkRequest, opts ...http.CallOption) (*ListShortLinkReply, error) {
	var out ListShortLinkReply
	pattern := "/v1/admin/slinks"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminServiceListShortLinks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
